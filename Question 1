#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

// Head pointer
Node* head = NULL;

// (a) Insertion at the beginning
void insertAtBeginning(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = head;
    head = newNode;
}

// (b) Insertion at the end
void insertAtEnd(int value) {
    Node* newNode = new Node();
    newNode->data = value;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
        return;
    }

    Node* temp = head;
    while (temp->next != NULL)
        temp = temp->next;

    temp->next = newNode;
}

// (c) Insertion before/after a specific node
void insertBeforeAfter(int key, int value, bool insertAfter) {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }

    Node* newNode = new Node();
    newNode->data = value;

    if (!insertAfter) {
        if (head->data == key) {
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* temp = head;
        while (temp->next != NULL && temp->next->data != key)
            temp = temp->next;

        if (temp->next == NULL) {
            cout << "Node " << key << " not found.\n";
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    } else {
        Node* temp = head;
        while (temp != NULL && temp->data != key)
            temp = temp->next;

        if (temp == NULL) {
            cout << "Node " << key << " not found.\n";
            delete newNode;
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }
}

// (d) Deletion from the beginning
void deleteFromBeginning() {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }

    Node* temp = head;
    head = head->next;
    delete temp;
}

// (e) Deletion from the end
void deleteFromEnd() {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }

    if (head->next == NULL) {
        delete head;
        head = NULL;
        return;
    }

    Node* temp = head;
    while (temp->next->next != NULL)
        temp = temp->next;

    delete temp->next;
    temp->next = NULL;
}

// (f) Deletion of a specific node
void deleteSpecific(int key) {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }

    if (head->data == key) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    Node* temp = head;
    while (temp->next != NULL && temp->next->data != key)
        temp = temp->next;

    if (temp->next == NULL) {
        cout << "Node " << key << " not found.\n";
        return;
    }

    Node* delNode = temp->next;
    temp->next = delNode->next;
    delete delNode;
}

// (g) Search for a node and display position
void searchNode(int key) {
    Node* temp = head;
    int position = 1;
    while (temp != NULL) {
        if (temp->data == key) {
            cout << "Node " << key << " found at position " << position << ".\n";
            return;
        }
        temp = temp->next;
        position++;
    }
    cout << "Node " << key << " not found.\n";
}

// (h) Display all node values
void displayList() {
    if (head == NULL) {
        cout << "List is empty.\n";
        return;
    }

    Node* temp = head;
    cout << "List: ";
    while (temp != NULL) {
        cout << temp->data << " -> ";
        temp = temp->next;
    }
    cout << "NULL\n";
}

// Menu
void showMenu() {
    cout << "\nMenu:\n";
    cout << "1. Insert at beginning\n";
    cout << "2. Insert at end\n";
    cout << "3. Insert before a node\n";
    cout << "4. Insert after a node\n";
    cout << "5. Delete from beginning\n";
    cout << "6. Delete from end\n";
    cout << "7. Delete a specific node\n";
    cout << "8. Search a node\n";
    cout << "9. Display list\n";
    cout << "0. Exit\n";
}

int main() {
    int choice, value, key;

    do {
        showMenu();
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter value to insert: ";
                cin >> value;
                insertAtBeginning(value);
                break;

            case 2:
                cout << "Enter value to insert: ";
                cin >> value;
                insertAtEnd(value);
                break;

            case 3:
                cout << "Enter key to insert before: ";
                cin >> key;
                cout << "Enter value to insert: ";
                cin >> value;
                insertBeforeAfter(key, value, false);
                break;

            case 4:
                cout << "Enter key to insert after: ";
                cin >> key;
                cout << "Enter value to insert: ";
                cin >> value;
                insertBeforeAfter(key, value, true);
                break;

            case 5:
                deleteFromBeginning();
                break;

            case 6:
                deleteFromEnd();
                break;

            case 7:
                cout << "Enter value to delete: ";
                cin >> key;
                deleteSpecific(key);
                break;

            case 8:
                cout << "Enter value to search: ";
                cin >> key;
                searchNode(key);
                break;

            case 9:
                displayList();
                break;

            case 0:
                cout << "Exiting...\n";
                break;

            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 0);

    return 0;
}
